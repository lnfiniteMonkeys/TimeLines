* TimeLines [WIP]
The music live-coding language that grows with you, on stage or in the studio.
*** For Musicians
TimeLines is an extremely powerful, versatile, and customizable sequencer in the form of a live coding language. This means that, instead of pressing buttons and turning dials, one types code that describes how the various musical parameters should be moving over time. Typically, one would keep changing and adding to the code as a means of developing musical ideas, applying every change for instant feedback in the sound produced (hence the term "live coding"). You can think of it as the automation feature of modern DAWs on steroids, only instead of painstakingly clicking and dragging to get that shape just right you use simple maths that do the job for you.

TimeLines is based on the idea that music is a function of time. This simply means that, ultimately, music is what emerges as time flows forwards, bringing about changes in sound that we perceive as melodies, rhythms, chord progressions etc. In other words, if a painting is experienced by looking along the space of a canvas, then a piece of music is experienced by listening through time, from its beginning till end. TimeLines builds on that concept by forming all musical structure as functions of explicit time. "Explicit" simply means that time is not dealt with behind the scenes, as is the case for most synthesizers and music software, but is rather brought to the surface and subjected to any and all kinds of transformations: we can stretch it, compress it, loop it, speed it up and slow it down, and give it all sorts of funny shapes. 

Every parameter of a musical process (synth, effect, sequence etc.) is controlled through an equation that asks a simple question: "If the time right now is 't' seconds (counting from the beginning of the piece), what value should this parameter have?". This question is then answered for every consecutive moment in time, essentially mapping out the "automation line" of that parameter. This allows one to become arbitrarily specific when making music, gaining full control over each and every aspect of their sound and composition.

The best part? The level of maths required is taught in schools, with 90% of the equations being additions, subtractions, multiplications, and divisions. All you have to do is learn how each of these changes the sound and behavior of your instruments. 
*** For Programmers
TimeLines is a real-time environment for live coding music as functions of explicit time. It is embedded in Haskell, a purely functional programming language, and currently lives within the Emacs programmable editor. It acts as a front-end to the SuperCollider synthesis server, modulating all parameters of a synth (such as its amplitude, frequency, filter cutoff etc.) over time by sampling mathematical equations hundreds or thousands of times per second.

At the moment, TimeLines is used as the "brains" of the SuperCollider synthesis engine, a completely modular environment for building and connecting sound synthesis and editing processes. TimeLines "plugs" on top of those processes and hijacks their behavior, taking full control of their parameters over time. Everything is purely functional: no state is changed, no envelopes are triggered, no sequencers are manipulated, just waves that dictate the motion of each parameter.

One day, you may even be able to use it for MIDI and CV outputs, allowing for full control over your hardware and modular synths over time.
** Code Examples
#+BEGIN_SRC Haskell
-- Set the current time selection to the first 10 seconds
window 0 10

-- An FM synth whose parameters stay constant over time
synth "staticTone_fm" $ do
  "amp" <>< 0.1
  "freq" <>< 200
  "modRatio" <>< 2
  "modAmt" <>< 100

-- Using a sine LFO of time-varying frequency to modulate
-- the frequency and amount of modulation
synth "wobble_fm" $ do
  let lfoSpeed = goFromTo 2 8 $ t/10 -- goes linearly from 2 to 8 Hz over 10 seconds
      lfo = sin $ 2*pi*t*lfoSpeed
  "amp" <>< 0.1
  "freq" <>< 300 + 100 * lfo
  "modRatio" <>< 10
  "modAmt" <>< 500 + 300 * lfo

-- Playing a looping melody while applying a tremolo LFO to the
-- amplitude and a slowed down version to the modulation amount
synth "tremoloMelody_fm" $ do
  let fundFreq = 120
      -- this will loop through the semitones every 5 seconds
      melody = fundFreq * (semitones $ fromList [0, 0, 5, 7, 8, 4, 12, 12] $ wrap01 $ t/5) 
      tremoloLFO = sin01 $ 2*pi*t*6
  "amp" <>< 0.1 * tremoloLFO
  "freq" <>< melody
  "modRatio" <>< 5
  "modAmt" <>< 1000 * (slow 2 $ tremoloLFO)
#+END_SRC

** Main Concepts
*** Signal
Signals are the building blocks of music in TimeLines, defined as functions that take Time and return a Value. The parameters of a synth/audio process can be thought of as signals; they all vary over time in some particular way. Some may be periodic (e.g. "sin (2*pi*t)"), others non-repeating (e.g. "noise t"), and some may stay constant for ever (e.g. "2.5"), but every moment has a specific value for every parameter associated with that synth. Signals can be combined (added, multiplied etc.) to produce more complex Signals that make up the whole piece or performance.
*** Timeline
A Timeline is a collection of Signals. Some may always be relevant (i.e. affecting that parameter for every moment in time), while others may only actually affect its behavior at certain times (say, only for the first or last 10 seconds). The combination of all those Signals in a Timeline is what determines the overall behavior of that parameter over the whole of time. Theoretically, each Timeline is an equation that will yield a value for every value of time you plug into it.
*** Window
A Window is a frame of time. All signals are defined over continuous, infinite time. A global Window determines the time interval over which all signals are actually being evaluated and observed. Without a Window, nothing actually gets calculated, everything is hypothetical (and completely deterministic, so you can be sure that evaluating the same code over the same Window will always yield the same results).

If you are familiar with DAWs, you can think of a Window as the selected section of the piece you are currently working on, which is usually either looped, to monitor changes to it while they're applied, or played in between changes.

If you are more familiar with programming, you can think of the Window as the viewport in a game: the code to put together a whole level already exists, but at any given moment there is only a certain window that has to be loaded and rendered, the one that the player is actually looking at. Everything else remains in the hypothetical realm, ready to be assembled when the time is right.

